#!/usr/bin/env ruby

INCIDENTS = [
    {actor: 'house', action: 'Jack built'},
    {actor: 'malt', action: 'lay in'},
    {actor: 'rat', action: 'ate'},
    {actor: 'cat', action: 'killed'},
    {actor: 'dog', action: 'worried'},
    {actor: 'cow with the crumpled horn', action: 'tossed'},
    {actor: 'maiden all forlorn', action: 'milked'},
    {actor: 'man all tattered and torn', action: 'kissed'},
    {actor: 'priest all shaven and shorn', action: 'married'},
    {actor: 'rooster that crowed in the morn', action: 'woke'},
    {actor: 'farmer sowing his corn', action: 'kept'},
    {actor: 'horse and the hound and the horn', action: 'belonged to'},
]

class Incident
  attr_accessor :actor, :action
  def initialize(actor, action)
    self.actor = actor
    self.action = action
  end
end

require 'forwardable'
class Incidents
  include Enumerable
  extend Forwardable
  def_delegators :collection, :each, :[]
  def initialize(actors, actions)
    build_incidents(actors, actions)
  end

  def collection
    @collection ||= []
  end

  private

  def build_incidents(actors, actions)
    actors.zip(actions).each do |actor_action|
      collection << Incident.new(actor_action[0], actor_action[1])
    end
  end
end

class Verse
  attr_accessor :incidents

  def initialize(incidents)
    self.incidents = incidents
  end

  def to_s
    "#{preamble}#{parts}.#{pause}"
  end

  private

  def preamble
    "This is"
  end

  def pause
    "\n\n"
  end

  def parts
    incidents.inject("") {|ret, i|  "#{VersePart.new(i)}#{ret}"}
  end
end

class VersePart
  attr_accessor :incident
  def initialize(incident)
    self.incident = incident
  end

  def to_s
    " the #{incident.actor} that #{incident.action}"
  end
end

class Verses
  attr_accessor :incidents
  def self.build(incidents)
    self.new(incidents).all
  end

  def initialize(incidents)
    self.incidents = incidents
  end

  def all
    concatenate_verses
  end

  private

  def concatenate_verses(verses = "")
    incidents.count.times {|i| verses << Verse.new(incidents[0..i]).to_s}
    verses
  end
end

class Rhyme
  attr_accessor :incidents
  def initialize(incidents)
    self.incidents = incidents
  end

  def say
    Verses.build(incidents)
  end
end

class VerseComponents
  include Enumerable
  extend Forwardable
  def_delegators :collection, :zip, :each
  attr_accessor :collection

  def initialize(data)
    self.collection = data.map {|i| i[self.key]}
  end

  def shuffle!
    collection.shuffle!
    self
  end

  def end_with(element)
    collection.unshift(collection.delete(element))
    self
  end
end

class Actors < VerseComponents
  def key
    :actor
  end
end

class Actions < VerseComponents
  def key
    :action
  end
end

actors = Actors.new(INCIDENTS)
actions = Actions.new(INCIDENTS)

actors.shuffle!.end_with("house")
actions.shuffle!.end_with("Jack built")

incidents = Incidents.new(actors, actions)
print Rhyme.new(incidents).say
